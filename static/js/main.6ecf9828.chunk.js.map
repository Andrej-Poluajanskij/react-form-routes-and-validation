{"version":3,"sources":["components/sharedComponent/logo.svg","components/HomePage/HomePage.js","routes/index.js","components/SecondPage/Second.js","components/ThirdPage/Third.js","components/sharedComponent/Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","field","errors","render","e","setState","target","value","name","preventDefault","validateForm","formIsValid","RegExp","test","_this2","react_default","a","createElement","react_router","to","pathname","email","className","ref","c","modalWindow","method","placeholder","type","emailid","onChange","setValue","bind","onClick","submitForm","Component","Second","email2","props","location","react_router_dom","Third","Logo","src","logo","alt","App","exact","path","component","Logo_Logo","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ecf9828.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport { Redirect  } from \"react-router-dom\";\r\nimport './HomePage.scss';\r\n\r\nimport * as ROUTES from '../../routes/index';\r\n\r\nexport default class HomePage extends Component{\r\n  constructor(){\r\n    super()\r\n    this.state = {inputValue: '', field: {}, errors: {}, render: false};\r\n \r\n  }\r\n  \r\n  setValue(e){\r\n    this.setState({\r\n      inputValue: e.target.value\r\n    })\r\n    let field = this.state.field;\r\n    field[e.target.name] = e.target.value;\r\n    this.setState({\r\n      field\r\n    });\r\n  }\r\n\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    if (this.validateForm()) {\r\n      let field = {};\r\n\r\n      field[\"emailid\"] = \"\";\r\n      \r\n      this.setState({field:field});\r\n     \r\n    }\r\n  }\r\n\r\n  validateForm() {\r\n\r\n    let field = this.state.field;\r\n    let errors = {};\r\n    let formIsValid = true;\r\n    this.setState({render:true})\r\n\r\n    if (!field[\"emailid\"]) {\r\n\r\n      formIsValid = false;\r\n      this.setState({render:false})\r\n      errors[\"emailid\"] = \"*Please enter your email-ID.\";\r\n    }\r\n\r\n    if (typeof field[\"emailid\"] !== \"undefined\") {\r\n      \r\n      let pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n\r\n      if (!pattern.test(field[\"emailid\"])) {\r\n\r\n        formIsValid = false;\r\n        this.setState({render:false})\r\n        errors[\"emailid\"] = \"*Please enter valid email-ID.\";\r\n      }\r\n    }\r\n    this.setState({\r\n      errors: errors\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  render(){\r\n    if(this.state.render === true){\r\n      return <Redirect  to={{\r\n      pathname: ROUTES.SECONDPAGE,\r\n      state: { email: this.state.inputValue}\r\n            }} />\r\n          }\r\n    return(\r\n      <div className=\"container-left\" ref={(c) => this.modalWindow = c }>\r\n      \r\n            <h1>Welcome message</h1>\r\n            <p>Note that the service is only available to legal entities</p>\r\n            <p>Enter your email to proceed</p>\r\n            <p>Your email will be your user name in internet bank</p>\r\n            <form method=\"post\"  name=\"userRegistrationForm\" >\r\n\r\n              <input  placeholder=\"INFO@COMAPNY.COM\" type=\"text\" name=\"emailid\"\r\n                      value={this.state.field.emailid}\r\n                      onChange={this.setValue.bind(this)}/><br/>\r\n              <div className=\"errorMsg\">{this.state.errors.emailid}</div>\r\n\r\n              <button type=\"submit\" className=\"button\"\r\n                      onClick= {this.submitForm.bind(this)}>START</button> \r\n              \r\n            </form>          \r\n      </div>\r\n        )\r\n    }\r\n}","export const HOMEPAGE = '/';\r\nexport const SECONDPAGE = '/second/';\r\nexport const THIRDPAGE = '/second/confirm';\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from '../../routes/index'\r\n\r\n\r\nexport default class Second extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {email2: ''}\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            email2: this.props.location.state\r\n        })\r\n    }\r\n    render(){\r\n        const {email} = this.props.location.state\r\n        return(\r\n            <div className=\"container-left\">\r\n\r\n                <h1>Verification email was sent to:</h1>\r\n                <h1>{email}</h1>\r\n                <p>Follow the link in a message to proceed with registration</p>\r\n\r\n                <Link to={{\r\n                    pathname: ROUTES.THIRDPAGE,\r\n                    state: {email2: this.state.email2}\r\n                            }}>CLOSE THIS WINDOW</Link>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport * as ROUTES from '../../routes/index'\r\n\r\nexport default class Third extends Component{\r\n    render(){\r\n        const {email2} = this.props.location.state   \r\n        return(\r\n            <div className=\"container-left\">\r\n\r\n                <h1>Successful registration email:</h1>\r\n                <h1>{email2.email}</h1>\r\n\r\n                <Link to={ROUTES.HOMEPAGE} >GO BACK </Link>\r\n            </div>\r\n   \r\n        )\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './Logo.scss'\r\n\r\n\r\nexport default class Logo extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"container-right\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              \r\n            </div>   \r\n   \r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.scss';\n\nimport HomePage from './components/HomePage/HomePage';\nimport Second from './components/SecondPage/Second'\nimport Third from './components/ThirdPage/Third'\n\nimport Logo from './components/sharedComponent/Logo'\n\nimport * as ROUTES from './routes'\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"main-container\" >\n        <Router >\n          \n            <Route exact path={ROUTES.HOMEPAGE} component={HomePage} />\n            <Route exact path={ROUTES.SECONDPAGE} component={Second} />\n            <Route path={ROUTES.THIRDPAGE} component={Third} />\n            <Logo />\n    \n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}